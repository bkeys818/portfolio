// -------------------- //
//         Font         //
// -------------------- //

@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;700&family=Rubik:wght@300;400&display=swap');
/*  font-family: 'Rubik', sans-serif;
    weights: 300, 400

    font-family: 'Quicksand', sans-serif;
    weights: 400, 700
*/




// -------------------- //
//     Color Scheme     //
// -------------------- //

$primary-background-color: #fff !default;
$secoundary-background-color: #f1f5f8 !default;
$primary-color: #252a32 !default;

body {
	background-color: $primary-background-color;
    color: $primary-color;
}




// -------------------- //
//        Layout        //
// -------------------- //

.relative-container {
    position: relative;
    .child {
        position: absolute;
        &.center{
            &-v {
                top: 50%;
                transform: translateY(-50%);
            }
            &-h {
                left: 50%;
                transform: translateX(-50%);
            }
            &-vh, &-hv {
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
            }
        }
    }
}

.margins-container {
    $breakpoint: 1440px;
    $max-width: 1000px;
    $margin-width: 26px;
    @function margin-width() {
        @return (($breakpoint - $max-width) / $breakpoint) * 50%;
    }

    // take up as much with as possible
    width: 100%;

    // set margins (padding attr) & max-width
    padding-left: margin-width();
    padding-right: margin-width();
    @media screen and (max-width: $breakpoint) {
        max-width: calc(#{$max-width} + (#{$margin-width} * 2));
        padding-left: $margin-width;
        padding-right: $margin-width;
    }
    margin-left: auto;
    margin-right: auto;
}

@mixin vertical-gutters($width: 12px) {
    &:not(:first-child):not(:last-child) {
        margin-left: $width;
        margin-right: $width;
    }
    &:first-child {
        margin-right: $width;
    }
    &:last-child {
        margin-left: $width;
    }
}



// -------------------- //
//        Other         //
// -------------------- //

@mixin smooth-shadow($direction: center, $offset: 20) {
    $layers: $offset/5+1;
    $offsetY: $offset * 1px;
    $offsetX: 0;
    $alpha: 0.20;

    @if $direction == left {
        $offsetX: $offsetY * -3 / 8;
    } @else if $direction == right {
        $offsetX: $offsetY * 3 / 8;
    } @else if type-of($value: $direction) == 'number' {
        $offsetX: $offsetY * $direction / 8;
    }

    // @debug $direction;
    // @debug $offsetX;

    $css:();
    @for $i from 1 to $layers+1 {
        $blur: $offsetY;
        $alpha: $alpha - .03;

        $shadow: #{$offsetX $offsetY $blur rgba(0,0,0,$alpha)};
        @if $i == $layers {
            $css: append($css, unquote($string: "#{$shadow};"))
        } @else {
            $css: append($css, unquote($string: "#{$shadow},"))
        }

        $offsetX: $offsetX / 2;
        $offsetY: $offsetY / 2;
    }
    // @debug $css;
    box-shadow: $css;
};